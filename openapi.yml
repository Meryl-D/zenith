openapi: 3.0.3
info:
  title: Swagger Zenith - OpenAPI
  description: |-
    During the last year of our bachelor's degree in media engineering at the HEIG-VD, the ArchiOWeb course required the development of a basic API as a project. This project gave us a different perspective from the frontend programming, which we were taught in more depth.
    
    This is a sample Travel Journal Server based on OpenAPI specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). This is the first version of our API, please be kind with our mistakes, we are newbies. („• ᴗ •„)
    
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
    
    **Authors:**
    - Meryl Dubois
    - Clarisse Gagnebin
    - Jasmine Molano Correia
    
    **Some useful links:**
    - [The project's repository](https://github.com/Meryl-D/zenith)
    - [The project deployed on Render](https://zenith.onrender.com)
    - [The source API definition for the project](https://github.com/Meryl-D/zenith/blob/main/openapi.yml)
  termsOfService: http://swagger.io/terms/
  #license:
    #name: Apache 2.0
    #url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://zenith.onrender.com/
  - url: http://localhost:3000/
tags:
  - name: comment
    description: Everything about comments
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations on users
  - name: post
    description: Publications that users post on Zenith
  - name: auth
    description: Authentification
paths:
  /comments/{commentId}:
    patch:
      tags:
        - comment
      summary: Update a comment by ID
      description: Partially update an existing comment under a post by its ID. Requires to be logged in and can only be done by the user who created it.
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          description: ID of the comment to reach
          required: true
          schema:
            type: integer
            format: int64
        - name: description
          in: query
          description: Content of the comment
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
        '405':
          description: Validation exception
    delete:
      tags:
        - comment
      summary: Delete a comment by ID
      description: Delete a comment by its ID. Requires to be logged in and can only be done by the user who created it.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: ID of the comment to reach
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment' 

  /users:
    post:
      tags:
        - user
      summary: Create a user
      description: Create a new user.
      operationId: postUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 

  /users/{userId}:
    patch:
      tags:
        - user
      summary: Update a user by ID
      description: Partially modify a user by its ID. Requires to be logged in and can only be done by oneself.
      operationId: patchUser
      parameters:
        - name: userId
          in: path
          description: ID of user to reach
          required: true
          schema:
            type: integer
            format: int64
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'  
    get:
      tags:
        - user
      summary: Get a user by ID
      description: Get a user by its ID. Requires to be logged in.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to reach
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 
    delete:
      tags:
        - user
      summary: Delete a user by ID
      description: Delete a user by its ID. Requires to be logged in and can only be done by oneself. This action also deletes all the posts created by the user and the comments under these posts.
      operationId: deleteUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 
      parameters:
        - name: userId
          in: path
          description: ID of user to reach
          required: true
          schema:
            type: integer
            format: int64

  /posts:
    get:
      tags:
        - post
      summary: Get all posts
      description: Get all visible posts from any user. Requires to be logged in.
      operationId: getPost
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '404':
          description: Page not found

  /posts/{postId}:
    post:
      tags:
        - post
      summary: Create a new post
      description: Create a new post on the map. Requires to be logged in.
      operationId: postPost
      parameters:
        - name: postId
          in: path
          description: ID of user to reach
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '404':
          description: Page not found
    patch:
      tags:
        - post
      summary: Update a post
      description: Partially modify a post by its ID. Requires to be logged in and can only be done by the user who created it.
      operationId: patchPost
      parameters:
        - name: postId
          in: path
          description: ID of the post to reach
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '404':
          description: Page not found
    delete:
      tags:
        - post
      summary: Delete a post by ID
      description: Delete a post by its ID. Requires to be logged in and can only be done by the user who created it. This deletes also all the comments under the post.
      operationId: deletePost
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '404':
          description: Page not found
      parameters:
        - name: postId
          in: path
          description: ID of user to reach
          required: true
          schema:
            type: integer
            format: int64

  /posts/{postId}/comments:
    get:
      tags:
        - post
      summary: Get all comments under a post
      description: Get all of the comments under a post. Requires the posts ID and to be logged in.
      operationId: postID
      parameters:
        - name: postId
          in: path
          description: ID of user to reach
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment' 
        '401':
          description: Unauthorized
        '404':
          description: Page not found
    post:
      tags:
        - post
      summary: Create a new comment under a post
      description: Create a comment under a post. Requires the posts ID and to be logged in.
      operationId: postApost
      parameters:
        - name: postId
          in: path
          description: ID of user to reach
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment' 
        '401':
          description: Unauthorized
        '404':
          description: Page not found
  
  /auth/login:
    get:
      tags:
        - auth
      summary: Logs user into the system
      description: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: '1a34f32bcgh38g'
        username:
          type: string
          example: aUserName
        password:
          type: string
          format: password
          example: mySuperStrongPassword2000
        registrationDate:
          type: string
          format: date
      required:
        - id
        - username
        - password

    Post:
      type: object
      properties:
        id:
          type: string
          example: '1a34f32bcgh38g'
        picture:
          type: object
          properties:
            url:
              type: string
              example: https://zenith.onrender.com/uploads/zenith_1a34f32bcgh38g.jpeg
            ext:
              type: string
              example: jpeg
        location:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: number
              example: [48, 75]
        description:
          type: string
          example: 'a full and usefull description'
        creationDate:
          type: string
          format: date
        visitDate:
          type: string
          format: date
        modificationDate:
          type: string
          format: date
        visible:
          type: boolean
          example: false
        userId:
          $ref: '#/components/schemas/User'
      required:
        - id
        - picture
        - location
        - description
        - visible
        
    Comment:
      type: object
      properties:
        id:
          type: string
          example: '1a34f32bcgh38g'
        description:
          type: string
          example: 'a full and usefull description'
        creationDate:
          type: string
          format: date
        modificationDate:
          type: string
          format: date
        userId:
          $ref: '#/components/schemas/User'
        postId:
          $ref: '#/components/schemas/Post'
      required: 
        - id
        - description